generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

model NFT {
  id        Int      @id @default(autoincrement())
  prompt    String
  imageUrl  String
  createdAt DateTime @default(now())
}

model Tester {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  text      String?
}

model City {
  id                 String    @id @default(cuid())
  name               String
  associatedLandmark String
  mainActivity       String
  worldId            String
  world              World     @relation(fields: [worldId], references: [id])
}

model Landmark {
  id      String    @id @default(cuid())
  name    String
  worldId String
  world   World     @relation(fields: [worldId], references: [id])
}

model Celebration {
  id      String    @id @default(cuid())
  name    String
  worldId String
  world   World     @relation(fields: [worldId], references: [id])
}

model World {
  id                String     @id @default(cuid())
  name              String
  chakra            Int   @unique
  otherside         String
  description       String
  characteristics   String
  characters        Character[]
  testCharacters    TestCharacter[]
  landmarks         Landmark[]
  cities            City[]
  characteristicsOfPeople  String
  celebrations      Celebration[]
}

model Character {
  id                   String   @id @default(cuid())
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt  @default(now())
  worldId                String
  world                  World    @relation(fields: [worldId], references: [id])
  promptForMidjourney    String?
  characterName          String?
  nftNumber              Int?
  characterBackstory     String?
  imageId                String?  // Back from imagine api
  upscaledImageUrls      String[] // store as JSON string
  chosenImageUrl         String?
  readyToMint            Boolean  @default(false)
  completionResponse     String?
  tweeted                Boolean  @default(false)
  addedToIPFS            Boolean  @default(false)
  state                  CharacterState
  traits                 Json?
  worldCharacteristicsOfPeople  String?
}

model TestCharacter {
  id                   String   @id @default(cuid())
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt  @default(now())
  worldId                String
  world                  World    @relation(fields: [worldId], references: [id])
  promptForMidjourney    String?
  characterName          String?
  nftNumber              Int?
  characterBackstory     String?
  imageId                String?  // Back from imagine api
  upscaledImageUrls      String[] // store as JSON string
  chosenImageUrl         String?
  readyToMint            Boolean  @default(false)
  completionResponse     String?
  state                  CharacterState
  traits                 Json?
  worldCharacteristicsOfPeople  String?
}

enum CharacterState {
  VOID                      // IDEA_IN_THE_NOOSPHERE
  GERMINAL                  // STORY_GENERATED
  EMBRYONIC                 // IMAGE_REQUESTED
  FETAL                     // IMAGE_RECEIVED
  BIRTHED                   // IMAGE_CHOSEN
  FAILED                    // IMAGE_GENERATION_FAILED
}
